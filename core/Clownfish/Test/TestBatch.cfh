/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

parcel Clownfish;

abstract class Clownfish::Test::TestBatch inherits Clownfish::Obj {
    TestFormatter *formatter;
    uint32_t       test_num;
    uint32_t       num_planned;
    uint32_t       num_passed;
    uint32_t       num_failed;
    uint32_t       num_skipped;

    inert incremented TestBatch*
    new(uint32_t num_planned, TestFormatter *formatter);

    inert TestBatch*
    init(TestBatch *self, uint32_t num_planned, TestFormatter *formatter);

    public void
    Destroy(TestBatch *self);

    /** Run the test batch and print test output and diagnosis.
     *
     * @return true if the test batch passed.
     */
    bool
    Run(TestBatch *self);

    /** Run the tests of the test batch.
     */
    abstract void
    Run_Tests(TestBatch *self);

    /** Return the number of tests planned.
     */
    uint32_t
    Get_Num_Planned(TestBatch *self);

    /** Return the number of tests run.
     */
    uint32_t
    Get_Num_Tests(TestBatch *self);

    /** Return the number of failed tests.
     */
    uint32_t
    Get_Num_Failed(TestBatch *self);

    inert bool
    test_true(void *vself, bool condition, const char *pattern, ...);

    inert bool
    test_false(void *vself, bool condition, const char *pattern, ...);

    inert bool
    test_int_equals(void *vself, long got, long expected,
                    const char *pattern, ...);

    inert bool
    test_float_equals(void *vself, double got, double expected,
                      const char *pattern, ...);

    inert bool
    test_string_equals(void *vself, const char *got, const char *expected,
                       const char *pattern, ...);

    inert bool
    pass(void *vself, const char *pattern, ...);

    inert bool
    fail(void *vself, const char *pattern, ...);

    inert void
    skip(void *vself, const char *pattern, ...);

    bool
    VTest_True(TestBatch *self, bool condition, const char *pattern,
               va_list args);

    bool
    VTest_False(TestBatch *self, bool condition, const char *pattern,
                va_list args);

    bool
    VTest_Int_Equals(TestBatch *self, long got, long expected,
                     const char *pattern, va_list args);

    bool
    VTest_Float_Equals(TestBatch *self, double got, double expected,
                       const char *pattern, va_list args);

    bool
    VTest_String_Equals(TestBatch *self, const char *got, const char *expected,
                       const char *pattern, va_list args);

    bool
    VPass(TestBatch *self, const char *pattern, va_list args);

    bool
    VFail(TestBatch *self, const char *pattern, va_list args);

    void
    VSkip(TestBatch *self, const char *pattern, va_list args);
}


